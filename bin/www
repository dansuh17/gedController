#!/usr/bin/env node
/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('gedController:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Attach http server to socket.io
 */
var io = app.io;
io.attach(server);

/**
 * serverside socket.io listener.
 * Here, the functions that the server reacts onto
 * specific messages are defined.
 */
var mongoose = require('mongoose');
var Vote = mongoose.model('Vote');

io.on('connection', function(socket) {
  console.log('new connection');
  socket.emit('welcome', {});

  var tomUp;
  var devinUp;
  Vote.findOne({}, function(err, vote) {
    if (err) {
      console.log("DB ERROR");
      return next(err);
    }
    console.log("retrieve from DB");

    tomUp = vote.tomUp;
    devinUp = vote.devinUp;

  });


  socket.on('addPowerBalance', function(data) {
    io.emit('addPowerBalance', data);

    if (parseInt(data.amount) > 0) {
      tomUp += parseInt(data.amount);
    }
    else {
      devinUp -= parseInt(data.amount);
    }

    Vote.findOneAndUpdate({}, {tomUp:tomUp, devinUp:devinUp}, function(err, vote) {
      if (err) {
        console.log("DB ERROR");
        return next(err);
      }
      console.log("db store successful")
    });

  });
});

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
